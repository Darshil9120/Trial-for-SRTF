#include<stdio.h> 

struct process 

{ 

      int pid; 

      int arrival_time, burst_time, ct, waiting_time, turnaround_time, priority; 

      int status; 

}process_queue[10]; 

 

int n; 

 

void Arrival_Time_Sorting() 

{ 

      struct process temp; 

      int i, j; 

      for(i = 0; i < n - 1; i++) 

      { 

            for(j = i + 1; j < n; j++) 

            { 

                  if(process_queue[i].arrival_time > process_queue[j].arrival_time) 

                  { 

                        temp = process_queue[i]; 

                        process_queue[i] = process_queue[j]; 

                        process_queue[j] = temp; 

                  } 

            } 

      } 

} 

 

void main() 

{ 

      int i, time = 0, burst_time = 0, largest; 

      float wait_time = 0, turnaround_time = 0, average_waiting_time, average_turnaround_time; 

      printf("\nEnter Number of Processes: "); 

      scanf("%d", &n); 

      for(i = 0; i < n; i++) 

      { 

            process_queue[i].pid = i+1; 

            printf("\nEnter Details For Process %d:\n", process_queue[i].pid); 

            printf("Enter Arrival Time: "); 

            scanf("%d", &process_queue[i].arrival_time ); 

            printf("Enter Burst Time: "); 

            scanf("%d", &process_queue[i].burst_time); 

            printf("Enter Priority: "); 

            scanf("%d", &process_queue[i].priority); 

            process_queue[i].status = 0; 

            burst_time = burst_time + process_queue[i].burst_time; 

      } 

      Arrival_Time_Sorting(); 

      process_queue[9].priority = -9999; 

      printf("\nProcess Name\tArrival Time\tBurst Time\tPriority\tWaiting Time"); 

      for(time = process_queue[0].arrival_time; time < burst_time;) 

      { 

            largest = 9; 

            for(i = 0; i < n; i++) 

            { 

                  if(process_queue[i].arrival_time <= time && process_queue[i].status != 1 && process_queue[i].priority > process_queue[largest].priority) 

                  { 

                        largest = i; 

                  } 

            } 

            time = time + process_queue[largest].burst_time; 

            process_queue[largest].ct = time; 

            process_queue[largest].waiting_time = process_queue[largest].ct - process_queue[largest].arrival_time - process_queue[largest].burst_time; 

            process_queue[largest].turnaround_time = process_queue[largest].ct - process_queue[largest].arrival_time; 

            process_queue[largest].status = 1; 

            wait_time = wait_time + process_queue[largest].waiting_time; 

            turnaround_time = turnaround_time + process_queue[largest].turnaround_time; 

            printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", process_queue[largest].pid, process_queue[largest].arrival_time, process_queue[largest].burst_time, process_queue[largest].priority, process_queue[largest].waiting_time); 

      } 

      average_waiting_time = wait_time / n; 

      average_turnaround_time = turnaround_time / n; 

      printf("\n\nAverage waiting time:\t%f\n", average_waiting_time); 

      printf("Average Turnaround Time:\t%f\n", average_turnaround_time); 

}